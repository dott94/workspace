#include "skgu.h"

#define DEFAULT_LABEL "skgu_key"

void
write_skfile (const char *skfname, void *raw_sk, size_t raw_sklen)
{
  int fdsk = 0;
  char *s = NULL;
  int status = 0;

  /* armor the raw symmetric key in raw_sk using armor64 */
  s = armor64(raw_sk,raw_sklen);
  /* YOUR CODE HERE */

  /* now let's write the armored symmetric key to skfname */
  
  if ((fdsk = open (skfname, O_WRONLY|O_TRUNC|O_CREAT, 0600)) == -1)
    {
    perror (getprogname ());
    free (s);
    /* scrub the buffer that's holding the key before exiting */
    /* YOUR CODE HERE */
    bzero(raw_sk,raw_sklen);
    exit (-1);
    }
  else 
    {
      status = write (fdsk, s, strlen (s));
      if (status != -1)
	{
	  status = write (fdsk, "\n", 1);
	}
      free (s);
      close (fdsk);
      /* do not scrub the key buffer under normal circumstances
	 (it's up to the caller) */ 
      
      if (status == -1)
	{
	  printf ("%s: trouble writing symmetric key to file %s\n", 
		  getprogname (), skfname);
	  perror (getprogname ());
	  
	  /* scrub the buffer that's holding the key before exiting */
	  bzero(raw_sk,raw_sklen);
	  /* YOUR CODE HERE */
	  
	  exit (-1);
	}
    }
}

struct rawpub {
  mpz_t p;			/* Prime */
  mpz_t q;			/* Order */
  mpz_t g;			/* Element of given order */
  mpz_t y;			/* g^x mod p */
};
typedef struct rawpub rawpub;

struct rawpriv {
  mpz_t p;			/* Prime */
  mpz_t q;			/* Order */
  mpz_t g;			/* Element of given order */
  mpz_t x;			/* x mod q */
};
typedef struct rawpriv rawpriv;

int 
get_rawpub (rawpub *rpub_ptr, dckey *pub) {
  const char *pub_as_str = (const char *) dcexport (pub);

  if (skip_str (&pub_as_str, ELGAMAL_STR)
      || skip_str (&pub_as_str, ":Pub,p="))
    return -1;

  mpz_init (rpub_ptr->p);
  mpz_init (rpub_ptr->q);
  mpz_init (rpub_ptr->g);
  mpz_init (rpub_ptr->y);

  if (read_mpz (&pub_as_str, rpub_ptr->p)
      || skip_str (&pub_as_str, ",q=")
      || read_mpz (&pub_as_str, rpub_ptr->q)
      || skip_str (&pub_as_str, ",g=")
      || read_mpz (&pub_as_str, rpub_ptr->g)
      || skip_str (&pub_as_str, ",y=")
      || read_mpz (&pub_as_str, rpub_ptr->y)) {
    return -1;
  }

  return 0;
}

int 
get_rawpriv (rawpriv *rpriv_ptr, dckey *priv) {
  const char *priv_as_str = (const char *) dcexport (priv);

  if (skip_str (&priv_as_str, ELGAMAL_STR)
      || skip_str (&priv_as_str, ":Priv,p="))
    return -1;

  mpz_init (rpriv_ptr->p);
  mpz_init (rpriv_ptr->q);
  mpz_init (rpriv_ptr->g);
  mpz_init (rpriv_ptr->x);

  if (read_mpz (&priv_as_str, rpriv_ptr->p)
      || skip_str (&priv_as_str, ",q=")
      || read_mpz (&priv_as_str, rpriv_ptr->q)
      || skip_str (&priv_as_str, ",g=")
      || read_mpz (&priv_as_str, rpriv_ptr->g)
      || skip_str (&priv_as_str, ",x=")
      || read_mpz (&priv_as_str, rpriv_ptr->x)) {
    return -1;
  }

  return 0;
}

void 
usage (const char *pname)
{
  printf ("Simple Shared-Key Generation Utility\n");
  printf ("Usage: %s PRIV-FILE PRIV-CERT PRIV-ID PUB-FILE PUB-CERT PUB-ID [LABEL]\n", pname);
  exit (-1);
}

void
nidh (dckey *priv, dckey *pub, char *priv_id, char *pub_id, char *label)
{
  rawpub rpub;
  rawpriv rpriv;

  /* YOUR VARS HERE */
  mpz_t alice_bob;
  char *buffer = NULL;
  char *total = NULL;
  char *descrip;
  char *desp_s0 = NULL;
  char *desp_s1 = NULL;
  char *destination;
  char *k_m;
  char *k_s0;
  char *k_s1;
  char *k_s;
  int n;
  int retrn = -1;
  /* step 0: check that the private and public keys are compatible,
     i.e., they use the same group parameters */

  destination = (char *)malloc(64 * sizeof(char));
  k_m = (char *)malloc(sha1_hashsize * sizeof(char));
  k_s0 = (char *)malloc(20 * sizeof(char));
  k_s1 = (char *)malloc(20 * sizeof(char));
  k_s = (char *)malloc(32 * sizeof(char));
  descrip = (char *)malloc((40 + sizeof(priv_id) + sizeof(pub_id)) * sizeof(char));


  if ((-1 == get_rawpub (&rpub, pub)) 
      || (-1 == get_rawpriv (&rpriv, priv))) {
    printf ("%s: trouble importing GMP values from ElGamal-like keys\n",
	    getprogname ());

    printf ("priv:\n%s\n", dcexport_priv (priv));
    printf ("pub:\n%s\n", dcexport_pub (pub));

    exit (-1);    
  } else if (mpz_cmp (rpub.p, rpriv.p)
	     || mpz_cmp (rpub.q, rpriv.q)
	     || mpz_cmp (rpub.g, rpriv.g)) {
    printf ("%s:  the private and public keys are incompatible\n",
	    getprogname ());
    
    printf ("priv:\n%s\n", dcexport_priv (priv));
    printf ("pub:\n%s\n", dcexport_pub (pub));

    exit (-1);
  } else {
    
    /* step 1a: compute the Diffie-Hellman secret
                (use mpz_init, mpz_powm, mpz_clear; look at elgamal.c in 
                 the libdcrypt source directory for sample usage 
     */
    
    /* YOUR CODE HERE */
    mpz_init(alice_bob);
    mpz_powm(alice_bob, rpub.y, rpriv.x, rpub.p);
    
    retrn = cat_mpz(&total, alice_bob);
    if(retrn != 0)
      {
	mpz_clear(alice_bob);
	printf("Allocation error");
	exit(-1);
      }

    /* step 1b: order the IDs lexicographically */
    char *fst_id = NULL, *snd_id = NULL;
    
    if (strcmp (priv_id, pub_id) < 0) {
      fst_id = priv_id;
      snd_id = pub_id;
    } else {
      fst_id = pub_id;
      snd_id = priv_id;
    }    
    
    /* step 1c: hash DH secret and ordered id pair into a master key */
    
    /* YOUR CODE HERE */
    cat_str(&buffer, total);
    cat_str(&buffer, fst_id);
    cat_str(&buffer, snd_id);

    sha1_hash(k_m, buffer, (strlen(buffer) * sizeof(char)));
    /* step 2: derive the shared key from the label and the master key */
    
    /* YOUR CODE HERE */
    sprintf(descrip, "MY-APP:task=encryption,opt=(sndr=%s,rcvr=%s", fst_id, snd_id);
    cat_str(&desp_s0, descrip);
    cat_str(&desp_s0, "AES-CTR");
    cat_str(&desp_s1, descrip);
    cat_str(&desp_s1, "CBC-MAC");
    

    hmac_sha1(k_m, sha1_hashsize, k_s0, desp_s0, strlen(desp_s0));
    hmac_sha1(k_m, sha1_hashsize, k_s1, desp_s1, strlen(desp_s1));
    
    for(n = 0; n < 16; n++)
      {
	*(k_s + n) = *(k_s0 + n);
	*(k_s + n + 16) = *(k_s1 + n);
      }
    
    *(k_s + 32) = '\0';
    
    /* step 3: armor the shared key and write it to file.
       Filename should be of the form <label>-<priv_id>.b64 */
    
    /* YOUR CODE HERE */
    
    destination = armor64(k_s, 32);
    printf("The shared key is: %s\n", destination);

    destination = (char *)realloc(destination, sizeof(label) + 1 + sizeof(priv_id) + 4);
    bzero(destination, sizeof(destination));
    
    cat_str(&destination, label);
    cat_str(&destination, "-");
    cat_str(&destination, priv_id);
    cat_str(&destination, ".b64");

    write_skfile(destination, k_s, 32);
    
    /* DELETE FOLLOWING LINES WHEN YOU ARE DONE */
    
    /*    printf ("NOT YET IMPLEMENTED.\n");
    printf ("priv:\n%s\n", dcexport_priv (priv));
    printf ("pub:\n%s\n", dcexport_pub (pub));
    printf ("priv_id: %s\n", priv_id);
    printf ("pub_id: %s\n", pub_id);
    printf ("fst_id: %s\n", fst_id);
    printf ("snd_id: %s\n", snd_id);
    printf ("label: %s\n", label);
    exit (-1);
    */

    bzero (k_m, sha1_hashsize);
    bzero (k_s0, sha1_hashsize);
    bzero (k_s1, sha1_hashsize);
    bzero (k_s, 32);
    bzero (buffer, sizeof (buffer));
    bzero (total, sizeof (total));
    bzero (destination, sizeof (destination));
    
    mpz_clear (rpriv.x);
    mpz_clear (alice_bob);
    
    free (k_m);
    free (k_s0);
    free (k_s1);
    free (k_s);
    free (buffer);
    free (total);
    free (destination);
    }
}

int
main (int argc, char **argv)
{
  int arg_idx = 0;
  char *privcert_file = NULL;
  char *pubcert_file = NULL;
  char *priv_file = NULL;
  char *pub_file = NULL;
  char *priv_id = NULL;
  char *pub_id = NULL;
  char *label = DEFAULT_LABEL;
  dckey *priv = NULL;
  dckey *pub = NULL;
  cert *priv_cert = NULL;
  cert *pub_cert = NULL;

  if ((7 > argc) || (8 < argc))    usage (argv[0]);

  ri ();

  priv_file = argv[++arg_idx];
  privcert_file = argv[++arg_idx];
  priv_id = argv[++arg_idx];
  pub_file  = argv[++arg_idx];
  pubcert_file = argv[++arg_idx];
  pub_id = argv[++arg_idx];
  if (argc - 2 == arg_idx) {
    /* there was a label */
    label = argv[++arg_idx];
  }

  pub_cert = pki_check(pubcert_file, pub_file, pub_id);
  /* check above won't return if something was wrong */
  pub = pub_cert->public_key;

  if (!cert_verify (priv_cert = cert_read (privcert_file))) {
      printf ("%s: trouble reading certificate from %s, "
	      "or certificate expired\n", getprogname (), privcert_file);
      perror (getprogname ());

      exit (-1);
  } else if (!dcareequiv(pub_cert->issuer,priv_cert->issuer)) {
    printf ("%s: certificates issued by different CAs.\n",
	    getprogname ());
    printf ("\tOwn (%s's) certificate in %s\n", priv_id, privcert_file);
    printf ("\tOther (%s's) certificate in %s\n", pub_id, pubcert_file);
  } else {
    priv = priv_from_file (priv_file);
    
    nidh (priv, pub, priv_id, pub_id, label);
  }

  return 0;
}
